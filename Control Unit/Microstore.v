/* Written by Misael Valentin Feliciano
Date last edited: 5/9/2018
Description: The microstore stores the microwords which represent the control signals generated by the control unit. 
These control words are indexed to specific state adddresses corresponding to particular states, and are then loaded into the Control Register.
*/
module Microstore (
					/* -------------------- Output -------------------- */
					// Register Load Enable Control Signals
					output reg RF_Ld,
					output reg FR_Ld,
					output reg IR_Ld,
					output reg MAR_Ld,
					output reg MDR_Ld,
					output reg PSR_Ld,
					output reg nPC_Ld,
					output reg PC_Ld,
					output reg TBR_Ld,
					output reg TBR_tt_Ld,
					output reg WIM_Ld,
					// Multiplexer Select Control Signals
					output reg [1:0] MUX_A,
					output reg [1:0] MUX_B,
					output reg [1:0] MUX_OP,
					output reg [1:0] MUX_RFA,
					output reg [1:0] MUX_RFB,
					output reg [2:0] MUX_RFDest,
					output reg [1:0] MUX_nPC,
					output reg [1:0] MUX_PC,
					output reg [1:0] MUX_Add4,
					output reg [1:0] MUX_MDR,
					output reg [1:0] MUX_SR,
					// Memory Control Signals
					output reg RW,
					output reg MOV,
					output reg [1:0] MOS,
					output reg SU,
					// Other Control Signals
					output reg [5:0] OP,
					// Feedback Control Signals
					output reg [8:0] Control_Register_Address,
					output reg [2:0] Next_State_Selector_Control,
					output reg Invert_Control,
					output reg [1:0] Condition_Select,
					// Debugging
					output reg [8:0] Next_State,
					/* -------------------- Input -------------------- */
					input [8:0] Next_State_Address,
					input Clock,
					input Reset
					);
	
	integer LogFile;
	
	// Initial Reset State
	initial
		// State 0 -- Reset
		begin
		// Debugging
		Next_State <= 0;
		// Time formatting
		$timeformat(-9, 2, " ns", 0);
		// Error logging
		LogFile = $fopen("D:\\Users\\Misael\\Documents\\Classes\\ICOM4215-001D\\SPARC Microprocessor\\Logs\\Control Unit Logs\\Microstore_log.dat");
		// Register Load Enable Control Signals
		RF_Ld <= 1'b0;
		FR_Ld <= 1'b0;
		IR_Ld <= 1'b0;
		MAR_Ld <= 1'b0;
		MDR_Ld <= 1'b0;
		PSR_Ld <= 1'b0;
		nPC_Ld <= 1'b1;
		PC_Ld <= 1'b1;
		TBR_Ld <= 1'b0;
		WIM_Ld <= 1'b0;
		// Multiplexer Select Control Signals
		MUX_A <= 2'b00;
		MUX_B <= 2'b00;
		MUX_OP <= 2'b00;
		MUX_RFA <= 2'b00;
		MUX_RFB <= 2'b00;
		MUX_RFDest <= 3'b000;
		MUX_nPC <= 2'b11;
		MUX_PC <= 2'b11;
		MUX_Add4 <= 2'b00;
		MUX_MDR <= 2'b00;
		// Memory Control Signals
		RW <= 1'b0;
		MOV <= 1'b0;
		MOS <= 2'b10;
		SU <= 1'b0;
		// Other Control Signals
		OP <= 6'b000000;
		// Feedback Control Signals
		Control_Register_Address <= 9'd1;	
		Next_State_Selector_Control <= 3'b001;	// Select Fetch state, Condition_Control don't care
		Invert_Control <= 1'b0;
		Condition_Select <= 2'b00;
		end
		
	// Asynchronous Reset Signal
	always @ (posedge Reset)
		// State 0 -- Reset
		begin
		$fdisplay(LogFile, "%t Reset Signal received", $time);
		Next_State <= 0;
		// Register Load Enable Control Signals
		RF_Ld <= 1'b0;
		FR_Ld <= 1'b0;
		IR_Ld <= 1'b0;
		MAR_Ld <= 1'b0;
		MDR_Ld <= 1'b0;
		PSR_Ld <= 1'b0;
		nPC_Ld <= 1'b1;
		PC_Ld <= 1'b1;
		TBR_Ld <= 1'b0;
		WIM_Ld <= 1'b0;
		// Multiplexer Select Control Signals
		MUX_A <= 2'b00;
		MUX_B <= 2'b00;
		MUX_OP <= 2'b00;
		MUX_RFA <= 2'b00;
		MUX_RFB <= 2'b00;
		MUX_RFDest <= 3'b000;
		MUX_nPC <= 2'b11;
		MUX_PC <= 2'b11;
		MUX_Add4 <= 2'b00;
		MUX_MDR <= 2'b00;
		// Memory Control Signals
		RW <= 1'b0;
		MOV <= 1'b0;
		MOS <= 2'b10;
		SU <= 1'b0;
		// Other Control Signals
		OP <= 6'b000000;
		// Feedback Control Signals
		Control_Register_Address <= 9'd1;	
		Next_State_Selector_Control <= 3'b001;	// Select Fetch state, Condition_Control don't care
		Invert_Control <= 1'b0;
		Condition_Select <= 2'b00;
		end
		
	always @ (posedge Clock)
		begin
		if (!Reset)
			begin
			$fdisplay(LogFile, "%t Next_State_Address: %d", $time, Next_State_Address);
			Next_State <= Next_State_Address;
			case (Next_State_Address)
			9'd0: // State 0 -- Set PC to 0 and nPC to 4
				begin
				$fdisplay(LogFile, "%t Reset Signal received", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b11;
				MUX_PC <= 2'b11;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd1;	
				Next_State_Selector_Control <= 3'b001;	// Select Fetch state, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			/* Fetch Cycle Start */
			9'd1: // State 1 -- Fetch State Start
				begin
				$fdisplay(LogFile, "%t Next state: 1", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;		// Select PC as Operand_A
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;	// Select OP Control Signal
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b01;	// Select R0
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;	// OR Operation (PC OR'd with 0 passes it unchanged)
				// Feedback Control Signals
				Control_Register_Address <= 9'd2;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd2: // State 2 -- Fetch
				begin
				$fdisplay(LogFile, "%t Next state: 2", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b1;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd3;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd3: // State 3 -- Fetch
				begin
				$fdisplay(LogFile, "%t Next state: 3", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;		
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;	
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;	
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd3;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;	// Test MOC
				end
				
			9'd4: // State 4 -- Fetch
				begin
				$fdisplay(LogFile, "%t Next state: 4", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd74;	// When Cond = 0 for conditional branches
				Next_State_Selector_Control <= 3'b100;	// Select Control_Register if Condition not met; Encoder if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b01;	// Test Cond
				end
			/* Fetch Cycle End */
			
			/* Add (R-R) instruction start */
			9'd5: // State 5
				begin
				$fdisplay(LogFile, "%t Next state: 5", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Add (R-R) Instruction End */
			
			/* Add (simm13) instruction start */
			9'd6: // State 6
				begin
				$fdisplay(LogFile, "%t Next state: 6", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Add (simm13) Instruction End */
			
			/* Addcc (R-R) instruction start */
			9'd7: // State 7
				begin
				$fdisplay(LogFile, "%t Next state: 7", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Addcc (R-R) Instruction End */
			
			/* Addcc (simm13) instruction start */
			9'd8: // State 8
				begin
				$fdisplay(LogFile, "%t Next state: 8", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Addcc (simm13) Instruction End */
			
			/* Addx (R-R) instruction start */
			9'd9: // State 9
				begin
				$fdisplay(LogFile, "%t Next state: 9", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Addx (R-R) Instruction End */
			
			/* Addx (simm13) instruction start */
			9'd10: // State 10
				begin
				$fdisplay(LogFile, "%t Next state: 10", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Addx (simm13) Instruction End */
			
			/* Addxcc (R-R) instruction start */
			9'd11: // State 11
				begin
				$fdisplay(LogFile, "%t Next state: 11", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Addxcc (R-R) Instruction End */
			
			/* Addxcc (simm13) instruction start */
			9'd12: // State 12
				begin
				$fdisplay(LogFile, "%t Next state: 12", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Addxcc (R-R) Instruction End */
			
			/* Sub (R-R) instruction start */
			9'd13: // State 13
				begin
				$fdisplay(LogFile, "%t Next state: 13", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Sub (R-R) Instruction End */
			
			/* Sub (simm13) instruction start */
			9'd14: // State 14
				begin
				$fdisplay(LogFile, "%t Next state: 14", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Sub (simm13) Instruction End */
			
			/* Subcc (R-R) instruction start */
			9'd15: // State 15
				begin
				$fdisplay(LogFile, "%t Next state: 15", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Subcc (R-R) Instruction End */
			
			/* Subcc (simm13) instruction start */
			9'd16: // State 16
				begin
				$fdisplay(LogFile, "%t Next state: 16", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Subcc (simm13) Instruction End */
			
			/* Subx (R-R) instruction start */
			9'd17: // State 17
				begin
				$fdisplay(LogFile, "%t Next state: 17", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Subx (R-R) Instruction End */
			
			/* Subx (simm13) instruction start */
			9'd18: // State 18
				begin
				$fdisplay(LogFile, "%t Next state: 18", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Subx (simm13) Instruction End */
			
			/* Subxcc (R-R) instruction start */
			9'd19: // State 19
				begin
				$fdisplay(LogFile, "%t Next state: 19", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Subxcc (R-R) Instruction End */
			
			/* Subxcc (simm13) instruction start */
			9'd20: // State 20
				begin
				$fdisplay(LogFile, "%t Next state: 20", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Subxcc (simm13) Instruction End */
			
			/* And (R-R) instruction start */
			9'd21: // State 21
				begin
				$fdisplay(LogFile, "%t Next state: 21", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* And (R-R) Instruction End */
			
			/* And (simm13) instruction start */
			9'd22: // State 22
				begin
				$fdisplay(LogFile, "%t Next state: 22", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* And (simm13) Instruction End */
			
			/* Andcc (R-R) instruction start */
			9'd23: // State 23
				begin
				$fdisplay(LogFile, "%t Next state: 23", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Andcc (R-R) Instruction End */
			
			/* Andcc (simm13) instruction start */
			9'd24: // State 24
				begin
				$fdisplay(LogFile, "%t Next state: 24", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Andcc (simm13) Instruction End */
			
			/* Andn (R-R) instruction start */
			9'd25: // State 25
				begin
				$fdisplay(LogFile, "%t Next state: 25", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Andn (R-R) Instruction End */
			
			/* Andn (simm13) instruction start */
			9'd26: // State 26
				begin
				$fdisplay(LogFile, "%t Next state: 26", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Andn (simm13) Instruction End */
			
			/* Andncc (R-R) instruction start */
			9'd27: // State 27
				begin
				$fdisplay(LogFile, "%t Next state: 27", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Andncc (R-R) Instruction End */
			
			/* Andncc (simm13) instruction start */
			9'd28: // State 28
				begin
				$fdisplay(LogFile, "%t Next state: 28", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Andncc (simm13) Instruction End */
			
			/* Or (R-R) instruction start */
			9'd29: // State 29
				begin
				$fdisplay(LogFile, "%t Next state: 29", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Or (R-R) Instruction End */
			
			/* Or (simm13) instruction start */
			9'd30: // State 30
				begin
				$fdisplay(LogFile, "%t Next state: 30", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Or (simm13) Instruction End */
			
			/* Orcc (R-R) instruction start */
			9'd31: // State 31
				begin
				$fdisplay(LogFile, "%t Next state: 31", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Orcc (R-R) Instruction End */
			
			/* Orcc (simm13) instruction start */
			9'd32: // State 32
				begin
				$fdisplay(LogFile, "%t Next state: 32", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Orcc (simm13) Instruction End */
			
			/* Orn (R-R) instruction start */
			9'd33: // State 33
				begin
				$fdisplay(LogFile, "%t Next state: 33", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Orn (R-R) Instruction End */
			
			/* Orn (simm13) instruction start */
			9'd34: // State 34
				begin
				$fdisplay(LogFile, "%t Next state: 34", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Orn (simm13) Instruction End */
			
			/* Orncc (R-R) instruction start */
			9'd35: // State 35
				begin
				$fdisplay(LogFile, "%t Next state: 35", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Orncc (R-R) Instruction End */
			
			/* Orncc (simm13) instruction start */
			9'd36: // State 36
				begin
				$fdisplay(LogFile, "%t Next state: 36", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Orncc (simm13) Instruction End */
			
			/* Xor (R-R) instruction start */
			9'd37: // State 37
				begin
				$fdisplay(LogFile, "%t Next state: 37", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xor (R-R) Instruction End */
			
			/* Xor (simm13) instruction start */
			9'd38: // State 38
				begin
				$fdisplay(LogFile, "%t Next state: 38", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xor (simm13) Instruction End */
			
			/* Xorcc (R-R) instruction start */
			9'd39: // State 39
				begin
				$fdisplay(LogFile, "%t Next state: 39", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xorcc (R-R) Instruction End */
			
			/* Xorcc (simm13) instruction start */
			9'd40: // State 40
				begin
				$fdisplay(LogFile, "%t Next state: 40", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xorcc (simm13) Instruction End */
			
			/* Xorn (R-R) instruction start */
			9'd41: // State 41
				begin
				$fdisplay(LogFile, "%t Next state: 41", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xorn (R-R) Instruction End */
			
			/* Xorn (simm13) instruction start */
			9'd42: // State 42
				begin
				$fdisplay(LogFile, "%t Next state: 42", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xorn (simm13) Instruction End */
			
			/* Xorncc (R-R) instruction start */
			9'd43: // State 43
				begin
				$fdisplay(LogFile, "%t Next state: 43", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xorncc (R-R) Instruction End */
			
			/* Xorncc (simm13) instruction start */
			9'd44: // State 44
				begin
				$fdisplay(LogFile, "%t Next state: 44", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b1;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Xorncc (simm13) Instruction End */
			
			/* SRL (R-R) instruction start */
			9'd45: // State 45
				begin
				$fdisplay(LogFile, "%t Next state: 45", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SRL (R-R) Instruction End */
			
			/* SRL (simm13) instruction start */
			9'd46: // State 46
				begin
				$fdisplay(LogFile, "%t Next state: 46", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SRL (simm13) Instruction End */
			
			/* SLL (R-R) instruction start */
			9'd47: // State 47
				begin
				$fdisplay(LogFile, "%t Next state: 47", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SLL (R-R) Instruction End */
			
			/* SLL (simm13) instruction start */
			9'd48: // State 48
				begin
				$fdisplay(LogFile, "%t Next state: 48", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SLL (simm13) Instruction End */
			
			/* SRA (R-R) instruction start */
			9'd49: // State 49
				begin
				$fdisplay(LogFile, "%t Next state: 49", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SRA (R-R) Instruction End */
			
			/* SRA (simm13) instruction start */
			9'd50: // State 50
				begin
				$fdisplay(LogFile, "%t Next state: 50", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SRA (simm13) Instruction End */
			
			/* SETHI instruction start */
			9'd51: // State 51
				begin
				$fdisplay(LogFile, "%t Next state: 51", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SETHI Instruction End */
			
			/* Load Signed Byte (R-R) Instruction Start */
			9'd53: //State 53
				begin
				$fdisplay(LogFile, "%t Next state: 53", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd54: //State 54
				begin
				$fdisplay(LogFile, "%t Next state: 54", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b1;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd55: //State 55
				begin
				$fdisplay(LogFile, "%t Next state: 55", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b1;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd55;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd56: //State 56
				begin
				$fdisplay(LogFile, "%t Next state: 56", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Load Signed Byte (R-R) Instruction End */
			
			/* Load Signed Byte (simm13) Instruction Start */
			9'd57: //State 57
				begin
				$fdisplay(LogFile, "%t Next state: 57", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd58: //State 58
				begin
				$fdisplay(LogFile, "%t Next state: 58", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b1;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd59: //State 59
				begin
				$fdisplay(LogFile, "%t Next state: 59", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b1;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd59;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd60: //State 60
				begin
				$fdisplay(LogFile, "%t Next state: 60", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Load Signed Byte (Simm13) Instruction End */
			
			/* Store Word (R-R) Instruction Start */
			9'd61: //State 61
				begin
				$fdisplay(LogFile, "%t Next state: 61", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd62: //State 62
				begin
				$fdisplay(LogFile, "%t Next state: 62", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b10;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b01;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd63: //State 63
				begin
				$fdisplay(LogFile, "%t Next state: 63", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd63;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd64: //State 64
				begin
				$fdisplay(LogFile, "%t Next state: 64", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd64;
				Next_State_Selector_Control <= 3'b101;	// Select Control_Register if Condition not met; Fetch State if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Store Word (R-R) Instruction End */
			
			/* Store Word (Simm13) Instruction Start */
			9'd65: //State 65
				begin
				$fdisplay(LogFile, "%t Next state: 65", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd66: //State 66
				begin
				$fdisplay(LogFile, "%t Next state: 66", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b10;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b01;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd67: //State 67
				begin
				$fdisplay(LogFile, "%t Next state: 67", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd67;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd68: //State 68
				begin
				$fdisplay(LogFile, "%t Next state: 68", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Load (R-R) Instruction End */
			
			/* Jmpl (R-R) instruction start */
			9'd69: // State 69
				begin
				$fdisplay(LogFile, "%t Next state: 69", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd70: // State 70
				begin
				$fdisplay(LogFile, "%t Next state: 70", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b10;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Jmpl (R-R) Instruction End */
			
			/* CALL instruction start */
			9'd71: // State 71
				begin
				$fdisplay(LogFile, "%t Next state: 71", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b010;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;	// OR (R-R)
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd72: // State 72
				begin
				$fdisplay(LogFile, "%t Next state: 72", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b10;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* CALL Instruction End */
			
			/* Jmpl (simm13) instruction start */
			9'd75: // State 75
				begin
				$fdisplay(LogFile, "%t Next state: 75", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd76: // State 76
				begin
				$fdisplay(LogFile, "%t Next state: 76", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b10;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Jmpl (simm13) Instruction End */
			
			/* Load Unsigned Byte (R-R) Instruction Start */
			9'd80: //State 80
				begin
				$fdisplay(LogFile, "%t Next state: 80", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd81: //State 81
				begin
				$fdisplay(LogFile, "%t Next state: 81", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd82: //State 82
				begin
				$fdisplay(LogFile, "%t Next state: 82", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd82;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd83: //State 83
				begin
				$fdisplay(LogFile, "%t Next state: 83", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Load Unsigned Byte (R-R) Instruction End */
			
			/* Load Unsigned Byte (simm13) Instruction Start */
			9'd84: //State 84
				begin
				$fdisplay(LogFile, "%t Next state: 84", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd85: //State 85
				begin
				$fdisplay(LogFile, "%t Next state: 85", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd86: //State 86
				begin
				$fdisplay(LogFile, "%t Next state: 86", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd86;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd87: //State 87
				begin
				$fdisplay(LogFile, "%t Next state: 87", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Load Unsigned Byte (simm13) Instruction Start */
			
			/* Store Byte (R-R) Instruction Start */
			9'd88: //State 88
				begin
				$fdisplay(LogFile, "%t Next state: 88", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd89: //State 89
				begin
				$fdisplay(LogFile, "%t Next state: 89", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b01;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd90: //State 90
				begin
				$fdisplay(LogFile, "%t Next state: 90", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd90;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd91: //State 91
				begin
				$fdisplay(LogFile, "%t Next state: 91", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd91;
				Next_State_Selector_Control <= 3'b101;	// Select Control_Register if Condition not met; Fetch State if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Store Byte (R-R) Instruction End */
			
			/* Store Byte (simm13) Instruction Start */
			9'd92: //State 92
				begin
				$fdisplay(LogFile, "%t Next state: 92", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd93: //State 93
				begin
				$fdisplay(LogFile, "%t Next state: 93", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b10;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b01;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd94: //State 94
				begin
				$fdisplay(LogFile, "%t Next state: 94", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd94;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd95: //State 95
				begin
				$fdisplay(LogFile, "%t Next state: 95", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b1;
				MOS <= 2'b00;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd95;
				Next_State_Selector_Control <= 3'b101;	// Select Control_Register if Condition not met; Fetch State if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Store Byte (simm13) Instruction End */
			
			/* Load Word (R-R) Instruction Start */
			9'd104: //State 104
				begin
				$fdisplay(LogFile, "%t Next state: 104", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd105: //State 105
				begin
				$fdisplay(LogFile, "%t Next state: 105", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd106: //State 106
				begin
				$fdisplay(LogFile, "%t Next state: 106", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd106;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd107: //State 107
				begin
				$fdisplay(LogFile, "%t Next state: 107", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Load Word (R-R) Instruction End */
			
			/* Load Word (simm13) Instruction Start */
			9'd108: //State 84
				begin
				$fdisplay(LogFile, "%t Next state: 108", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b1;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd109: //State 109
				begin
				$fdisplay(LogFile, "%t Next state: 109", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd110: //State 110
				begin
				$fdisplay(LogFile, "%t Next state: 110", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b1;
				MOV <= 1'b1;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd110;	// Hold
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				
			9'd111: //State 111
				begin
				$fdisplay(LogFile, "%t Next state: 111", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Load Word (simm13) Instruction Start */
			
			/* Conditional Branch Instruction start */
			9'd73: // State 73 -- When Cond = 1 for Conditional Branches; PC <-- nPC, nPC <-- PC + 4*disp22
				begin
				$fdisplay(LogFile, "%t Next state: 73", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b10;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd1;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Conditional Branch Instruction End */
			
			/* Conditional Branch Instruction start */
			9'd74: // State 74 -- When Cond is = 0 for Conditional Branches and Unconditional Branches; PC <-- nPC, nPC <-- nPC + 4
				begin
				$fdisplay(LogFile, "%t Next state: 74", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd125;
				Next_State_Selector_Control <= 3'b101;	// Select Control_Register if Condition not met; Fetch State if Condition met
				Invert_Control <= 1'b1;	// If a = 1, Condition is not met and Control Register is selected
				Condition_Select <= 2'b10; // Test a
				end
			/* Conditional Branch Instruction End */
			
			/* Conditional Branch Instruction start */
			9'd125: // State 105 -- When Cond = 0 and a = 1; PC <-- nPC, nPC <-- nPC + 4
				begin
				$fdisplay(LogFile, "%t Next state: 125", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd1;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b01;
				end
			/* Conditional Branch Instruction End */
			
			/* Unconditional Branch Instruction start */
			9'd101: // State 101 -- NOP; Test a
				begin
				$fdisplay(LogFile, "%t Next state: 101", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b10;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd103;
				Next_State_Selector_Control <= 3'b111;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b1;
				Condition_Select <= 2'b10; // Test a
				end
			/* Unconditional Branch Instruction End */
			
			/* Unconditional Branch Instruction start */
			9'd102: // State 102 -- a = 0; nPC <-- PC + 4*disp22, PC <-- nPC
				begin
				$fdisplay(LogFile, "%t Next state: 102", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b10;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd1;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Unconditional Branch Instruction End */
			
			/* Unconditional Branch Instruction start */
			9'd103: // State 103 -- a = 1; nPC <-- PC + 4*disp22, PC <-- nPC + 4
				begin
				$fdisplay(LogFile, "%t Next state: 103", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b10;
				MUX_PC <= 2'b01;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd1;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Unconditional Branch Instruction End */
			
			/* Trap (imm7) Instruction start */
			9'd150: // State 150 -- Write to TBR
				begin
				$fdisplay(LogFile, "%t Next state: 150", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				TBR_tt_Ld <= 1'b1;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd151: // State 151 -- Write to PSR
				begin
				$fdisplay(LogFile, "%t Next state: 151", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				TBR_tt_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111111;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd152: // State 152 -- Store PC in R17
				begin
				$fdisplay(LogFile, "%t Next state: 151", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b01;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b011;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd153: // State 153 -- Store nPC in R18
				begin
				$fdisplay(LogFile, "%t Next state: 152", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b100;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b11;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd154: // State 154 -- nPC <-- TBR + 4, PC <-- TBR
				begin
				$fdisplay(LogFile, "%t Next state: 154", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b10;
				MUX_Add4 <= 2'b01;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Trap (imm17) Instruction End */
			
			/* RDPSR Instruction start */
			9'd160: // State 160
				begin
				$fdisplay(LogFile, "%t Next state: 160", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* RDPSR Instruction End */
			
			/* RDWIM Instruction start */
			9'd161: // State 161
				begin
				$fdisplay(LogFile, "%t Next state: 161", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b10;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* RDWIM Instruction End */
			
			/* RDTBR Instruction start */
			9'd162: // State 162
				begin
				$fdisplay(LogFile, "%t Next state: 162", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b01;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b01;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* RDTBR Instruction End */
			
			/* WRPSR (R-R) Instruction start */
			9'd166: // State 166
				begin
				$fdisplay(LogFile, "%t Next state: 166", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* WRPSR (R-R) Instruction End */
			
			/* WRPSR (simm13) Instruction start */
			9'd167: // State 167
				begin
				$fdisplay(LogFile, "%t Next state: 167", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* WRPSR (simm13) Instruction End */
			
			/* WRWIM (R-R) Instruction start */
			9'd168: // State 168
				begin
				$fdisplay(LogFile, "%t Next state: 168", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b1;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b10;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* WRWIM (R-R) Instruction End */
			
			/* WRWIM (simm13) Instruction start */
			9'd169: // State 169
				begin
				$fdisplay(LogFile, "%t Next state: 169", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b1;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b10;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* WRWIM (simm13) Instruction End */
			
			/* WRTBR (R-R) Instruction start */
			9'd170: // State 170
				begin
				$fdisplay(LogFile, "%t Next state: 170", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b1;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b01;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* WRTBR (R-R) Instruction End */
			
			/* WRTBR (simm13) Instruction start */
			9'd171: // State 171
				begin
				$fdisplay(LogFile, "%t Next state: 171", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b1;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b01;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* WRTBR (simm13) Instruction End */
			
			/* SAVE (R-R) Instruction start */
			9'd180: // State 180 -- Store RS1 + RS2 temporarily in MDR
				begin
				$fdisplay(LogFile, "%t Next state: 180", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;	// Temporary storage of RS1 + RS2
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd181: // State 181 -- Check for Window_Overflow trap
				begin
				$fdisplay(LogFile, "%t Next state: 181", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd200;		// Window_Overflow Trap
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b1;
				Condition_Select <= 2'b11;
				end
			
			9'd182: // State 182 -- Passed Window_Overflow test; decrement CWP
				begin
				$fdisplay(LogFile, "%t Next state: 182", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111110;
				// Feedback Control Signals
				Control_Register_Address <= 9'd0;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd183: // State 183 -- Update WIM
				begin
				$fdisplay(LogFile, "%t Next state: 183", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b1;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b11;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b10;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111100;
				// Feedback Control Signals
				Control_Register_Address <= 9'd0;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd184: // State 184 -- Store ADD in new window's RD
				begin
				$fdisplay(LogFile, "%t Next state: 184", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'd0;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch state, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* SAVE (R-R) Instruction End */
			
			/* SAVE (simm13) Instruction start */
			9'd185: // State 185 -- Store RS1 + simm13 temporarily in MDR
				begin
				$fdisplay(LogFile, "%t Next state: 185", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;	// Temporary storage of RS1 + simm13
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b01;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd181;
				Next_State_Selector_Control <= 3'b010;	// Select Control Register, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				/* SAVE (simm13) Instruction End */
				
			/* Window_Overflow Trap start */
			9'd200: // State 200 -- Write to TBR
				begin
				$fdisplay(LogFile, "%t Next state: 200", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				TBR_tt_Ld <= 1'b1;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd201: // State 201 -- Write to PSR
				begin
				$fdisplay(LogFile, "%t Next state: 201", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				TBR_tt_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b110000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd202: // State 202 -- nPC <-- TBR + 4, PC <-- TBR
				begin
				$fdisplay(LogFile, "%t Next state: 202", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b10;
				MUX_Add4 <= 2'b01;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Window_Overflow Trap End */
			
			/* Window_Underflow Trap start */
			9'd203: // State 200 -- Write to TBR
				begin
				$fdisplay(LogFile, "%t Next state: 203", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b1;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd203: // State 203 -- Write to PSR
				begin
				$fdisplay(LogFile, "%t Next state: 203", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b101001;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd204: // State 204 -- nPC <-- TBR + 4, PC <-- TBR
				begin
				$fdisplay(LogFile, "%t Next state: 204", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b10;
				MUX_Add4 <= 2'b01;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111101;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Window_Overflow Trap End */
			
			/* RESTORE (R-R) Instruction start */
			9'd205: // State 205 -- Store RS1 + RS2 temporarily in MDR
				begin
				$fdisplay(LogFile, "%t Next state: 180", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;	// Temporary storage of RS1 + RS2
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd206: // State 206 -- Check for Window_Underflow trap
				begin
				$fdisplay(LogFile, "%t Next state: 206", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd203;		// Window_Underflow Trap
				Next_State_Selector_Control <= 3'b110;	// Select Control_Register if Condition not met; Incrementer if Condition met
				Invert_Control <= 1'b1;
				Condition_Select <= 2'b01;
				end
			
			9'd207: // State 207 -- Passed Window_Underflow test; decrement CWP
				begin
				$fdisplay(LogFile, "%t Next state: 207", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111110;
				// Feedback Control Signals
				Control_Register_Address <= 9'd0;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd208: // State 183 -- Update WIM
				begin
				$fdisplay(LogFile, "%t Next state: 208", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b1;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b11;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b10;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111100;
				// Feedback Control Signals
				Control_Register_Address <= 9'd0;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd209: // State 209 -- Store ADD in new window's RD
				begin
				$fdisplay(LogFile, "%t Next state: 209", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b1;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b10;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b01;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000010;
				// Feedback Control Signals
				Control_Register_Address <= 9'd0;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch state, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* RESTORE (R-R) Instruction End */
			
			/* RESTORE (simm13) Instruction start */
			9'd210: // State 210 -- Store RS1 + simm13 temporarily in MDR
				begin
				$fdisplay(LogFile, "%t Next state: 210", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;	// Temporary storage of RS1 + simm13
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd206;
				Next_State_Selector_Control <= 3'b010;	// Select Control Register, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* RESTORE (simm13) Instruction End */
			
			/* Illegal_Instruction Trap start */
			9'd300: // State 300 -- Write to TBR
				begin
				$fdisplay(LogFile, "%t Next state: 300", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b1;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b111011;
				OP <= 6'b111011;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b010;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd301: // State 301 -- Write to PSR
				begin
				$fdisplay(LogFile, "%t Next state: 301", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b1;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b11;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b001;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b101111;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b011;	// Select Incrementer, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			
			9'd302: // State 302 -- nPC <-- TBR + 4, PC <-- TBR
				begin
				$fdisplay(LogFile, "%t Next state: 302", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b0;
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b1;
				PC_Ld <= 1'b1;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b00;
				MUX_OP <= 2'b00;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b10;
				MUX_Add4 <= 2'b01;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'h000;
				Next_State_Selector_Control <= 3'b001;	// Select Fetch State; Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
			/* Illegal_Instruction Trap End */
			
			/* RETT (R-R) Instruction start */						// FIX TRAPS SO THAT nPC and PC are stored!!!! Also finish implementing RETT
			9'd222: // State 222
				begin
				$fdisplay(LogFile, "%t Next state: 222", $time);
				// Register Load Enable Control Signals
				RF_Ld <= 1'b0;
				FR_Ld <= 1'b0;
				IR_Ld <= 1'b0;
				MAR_Ld <= 1'b0;
				MDR_Ld <= 1'b1;	// Temporary storage of RS1 + simm13
				PSR_Ld <= 1'b0;
				nPC_Ld <= 1'b0;
				PC_Ld <= 1'b0;
				TBR_Ld <= 1'b0;
				WIM_Ld <= 1'b0;
				// Multiplexer Select Control Signals
				MUX_A <= 2'b00;
				MUX_B <= 2'b01;
				MUX_OP <= 2'b01;
				MUX_RFA <= 2'b00;
				MUX_RFB <= 2'b00;
				MUX_RFDest <= 3'b000;
				MUX_nPC <= 2'b00;
				MUX_PC <= 2'b00;
				MUX_Add4 <= 2'b00;
				MUX_MDR <= 2'b00;
				MUX_SR <= 2'b00;
				// Memory Control Signals
				RW <= 1'b0;
				MOV <= 1'b0;
				MOS <= 2'b10;
				SU <= 1'b0;
				// Other Control Signals
				OP <= 6'b000000;
				// Feedback Control Signals
				Control_Register_Address <= 9'd181;
				Next_State_Selector_Control <= 3'b010;	// Select Control Register, Condition_Control don't care
				Invert_Control <= 1'b0;
				Condition_Select <= 2'b00;
				end
				/* RETT (R-R) Instruction End */
			
			default:
				begin
				$fdisplay(LogFile, "%t Invalid Next_State_Address: %d", $time, Next_State_Address);
				end
			endcase
		end
	end
endmodule